Folder: hosting/src\api
Filename: stripeApi.jsx
Contents:
import { db } from '../firebase/firebaseConfig';
import { doc, updateDoc } from 'firebase/firestore';
import axios from 'axios';
import { auth } from '../firebase/firebaseConfig'; // Ensure this is the correct path

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';

// Create an Axios instance
const stripeApi = axios.create({
  baseURL: API_BASE_URL,
});

// Add a request interceptor to attach the Firebase auth token
stripeApi.interceptors.request.use(async (config) => {
  try {
    const currentUser = auth.currentUser;
    if (currentUser) {
      const token = await currentUser.getIdToken(true); // Force refresh the token
      config.headers.Authorization = `Bearer ${token}`;
    } else {
      const token = localStorage.getItem('authToken');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    }
    return config;
  } catch (error) {
    console.error('Error setting up request interceptor:', error);
    return Promise.reject(error);
  }
});

// Example API function to update Stripe status in Firestore
export const updateStripeStatusInDb = async (userId, status) => {
  try {
    const userRef = doc(db, 'users', userId);
    await updateDoc(userRef, { stripeAccountStatus: status });
  } catch (error) {
    console.error('Error updating Stripe status in Firestore:', error);
    throw error; // Rethrow to handle it in the calling function
  }
};



// Function to create an account link for Stripe onboarding
export const createAccountLink = async (accountId) => {
  if (!accountId) {
    throw new Error('Account ID is required');
  }
  try {
    const response = await stripeApi.post('/stripeApi/create-account-link', { accountId });
    return response.data;
  } catch (error) {
    console.error('Error creating account link:', error);
    throw new Error('Failed to create account link: ' + (error.response?.data?.error || error.message));
  }
};

export const updateUserStripeAccount = async (userId, accountData) => {
  if (!userId) {
    throw new Error('User ID is required')
  }
  try {
    const response = await stripeApi.post(`/stripeApi/update-user-stripe-account/${userId}`, accountData)
    return response.data
  } catch (error) {
    console.error('Error updating user Stripe account:', error)
    throw new Error('Failed to update user Stripe account: ' + (error.response?.data?.error || error.message))
  }
}


// Function to create a new Stripe customer
export const createCustomer = async (customerData) => {
  try {
    const response = await stripeApi.post('/stripeApi/create-customer', customerData);
    return response.data;
  } catch (error) {
    console.error('Error creating Stripe customer:', error);
    throw new Error('Failed to create Stripe customer: ' + (error.response?.data?.error || error.message));
  }
};

// Function to update an existing Stripe customer
export const updateCustomer = async (customerId, updateData) => {
  if (!customerId) {
    throw new Error('Customer ID is required');
  }
  try {
    const response = await stripeApi.post(`/stripeApi/update-customer/${customerId}`, updateData);
    return response.data;
  } catch (error) {
    console.error('Error updating Stripe customer:', error);
    throw new Error('Failed to update Stripe customer: ' + (error.response?.data?.error || error.message));
  }
};

// Function to retrieve a payment intent
export const retrievePaymentIntent = async (paymentIntentId) => {
  if (!paymentIntentId) {
    throw new Error('Payment Intent ID is required');
  }
  try {
    const response = await stripeApi.get(`/stripeApi/retrieve-payment-intent/${paymentIntentId}`);
    return response.data;
  } catch (error) {
    console.error('Error retrieving payment intent:', error);
    throw new Error('Failed to retrieve payment intent: ' + (error.response?.data?.error || error.message));
  }
};

// Function to create a checkout session
export const createCheckoutSession = async (sessionData) => {
  try {
    const response = await stripeApi.post('/stripeApi/create-checkout-session', sessionData);
    return response.data;
  } catch (error) {
    console.error('Error creating checkout session:', error);
    throw new Error('Failed to create checkout session: ' + (error.response?.data?.error || error.message));
  }
};
// Function to create a Stripe connected account
export const createStripeConnectedAccount = async (email) => {
  try {
    const response = await axios.post('/api/create-stripe-account_test', { email });
    return {
      stripeAccountId: response.data.stripeAccountId,
      onboardingUrl: response.data.url, // Stripe onboarding link
    };
  } catch (error) {
    console.error('Error creating Stripe connected account:', error);
    throw new Error('Failed to create Stripe connected account');
  }
};



// Function to create an account link for Stripe onboarding


// Function to complete Stripe onboarding
export const completeStripeOnboarding = async (accountId) => {
  if (!accountId) {
    throw new Error('Account ID is required');
  }
  try {
    const response = await stripeApi.post('/stripeApi/complete-stripe-onboarding', { accountId });
    return response.data;
  } catch (error) {
    console.error('Error completing Stripe onboarding:', error);
    throw new Error('Failed to complete Stripe onboarding: ' + (error.response?.data?.error || error.message));
  }
};

// Function to create an account session for Stripe Connect
export const createAccountSession = async (accountId) => {
  if (!accountId) {
    throw new Error('Account ID is required');
  }
  try {
    const response = await stripeApi.post('/stripeApi/create-account-session', { accountId });
    return response.data;
  } catch (error) {
    console.error('Error creating account session:', error);
    throw new Error('Failed to create account session: ' + (error.response?.data?.error || error.message));
  }
};

// Function to get Stripe account status
export const getStripeAccountStatus = async (accountId) => {
  if (!accountId) {
    throw new Error('Account ID is required');
  }
  try {
    const response = await stripeApi.get(`/stripeApi/stripe-account-status/${accountId}`);
    return response.data.status;
  } catch (error) {
    console.error('Error fetching Stripe account status:', error);
    throw new Error('Failed to fetch Stripe account status: ' + (error.response?.data?.error || error.message));
  }
};

// Function to create a payment intent
export const createPaymentIntent = async (paymentDetails) => {
  const headers = { 'Content-Type': 'application/json' };
  if (!paymentDetails.rideId || paymentDetails.rideId.trim() === '') {
    throw new Error('Ride ID is required and cannot be empty.');
  }
  try {
    const response = await stripeApi.post('/stripeApi/create-payment-intent', paymentDetails, { headers });
    return response.data;
  } catch (error) {
    console.error('Error creating payment intent:', error);
    throw new Error('Failed to create payment intent: ' + (error.response?.data?.error || error.message));
  }
};

// Function to capture a payment intent
export const capturePaymentIntent = async (rideId, amount) => {
  if (!rideId || !amount) {
    throw new Error('Missing rideId or amount in request body');
  }
  try {
    const response = await stripeApi.post('/stripeApi/capture-payment-intent', { rideId, amount });
    return response.data;
  } catch (error) {
    console.error('Error capturing payment:', error);
    throw new Error('Failed to capture payment: ' + (error.response?.data?.error || error.message));
  }
};

// Function to cancel a payment intent
export const cancelPaymentIntent = async (paymentIntentId) => {
  if (!paymentIntentId) {
    throw new Error('Payment Intent ID is required');
  }
  try {
    const response = await stripeApi.post('/stripeApi/cancel-payment-intent', { paymentIntentId });
    return response.data;
  } catch (error) {
    console.error('Error canceling payment intent:', error);
    throw new Error('Failed to cancel payment intent: ' + (error.response?.data?.error || error.message));
  }
};

// Function to refund a payment intent
export const refundPaymentIntent = async (paymentIntentId) => {
  if (!paymentIntentId) {
    throw new Error('Payment Intent ID is required');
  }
  try {
    const response = await stripeApi.post('/stripeApi/refund-payment-intent', { paymentIntentId });
    return response.data;
  } catch (error) {
    console.error('Error refunding payment intent:', error);
    throw new Error('Failed to refund payment: ' + (error.response?.data?.error || error.message));
  }
};

// Function to handle request actions
export const handleRequestAction = async (request, action) => {
  try {
    if (!request.rideId || !request.rideFee) {
      throw new Error('Missing rideId or rideFee in the request data');
    }

    if (action === 'accept') {
      await capturePaymentIntent(request.rideId, Math.round(request.rideFee * 100));
    } else if (action === 'reject') {
      if (!request.paymentIntentId) {
        throw new Error('Payment Intent ID is required');
      }
      await cancelPaymentIntent(request.paymentIntentId);
    }
  } catch (error) {
    console.error(`Error ${action === 'accept' ? 'accepting' : 'rejecting'} ride request:`, error);
    throw error;
  }
};
export const handleCreateStripeOnboarding = async (email) => {
  try {
    const response = await axios.post('/api/create-stripe-account-link', { email });
    window.location.href = response.data.url; // Redirect to Stripe onboarding
  } catch (error) {
    console.error('Error creating Stripe onboarding link:', error);
    throw new Error('Error creating Stripe onboarding link: ' + error.message);
  }
};



export const handleCreateCheckoutSession = async (amount, customerEmail) => {
  try {
    const response = await axios.post('/api/create-checkout-session', {
      amount: parseInt(amount) * 100, // Convert to cents
      customerEmail,
    });
    window.location.href = response.data.url; // Redirect to Stripe Checkout
  } catch (error) {
    console.error('Error creating checkout session:', error);
    throw new Error('Error creating checkout session: ' + error.message);
  }
};

export const handleCapturePaymentIntent = async (paymentIntentId, customerEmail) => {
  try {
    const response = await axios.post('/api/capture-payment-intent', {
      paymentIntentId,
      customerEmail,
    });
    return response.data; // Return the captured payment intent data
  } catch (error) {
    console.error('Error capturing payment intent:', error);
    throw new Error('Error capturing payment intent: ' + error.message);
  }
};

export const handleCancelPaymentIntent = async (paymentIntentId) => {
  try {
    const response = await axios.post('/api/cancel-payment-intent', { paymentIntentId });
    return response.data; // Return the canceled payment intent data
  } catch (error) {
    console.error('Error canceling payment intent:', error);
    throw new Error('Error canceling payment intent: ' + error.message);
  }
};

// Default export of the Axios instance for custom use cases
export default stripeApi;


================================================================================

Folder: hosting/src\components\Forms
Filename: StripeOnboarding.jsx
Contents:
// StripeOnboarding.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';

const StripeOnboarding = () => {
  const { accountId } = useParams();
  const [loading, setLoading] = useState(true);
  const [link, setLink] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchAccountLink = async () => {
      try {
        const response = await axios.post('https://us-central1-rabbit-2ba47.cloudfunctions.net/createStripeAccountLink_test', {
          accountID: accountId
        });

        setLink(response.data.body.success);
        setLoading(false);
      } catch (error) {
        console.error('Error creating account link:', error);
        setLoading(false);
      }
    };

    fetchAccountLink();
  }, [accountId]);

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="p-4">
      <h2 className="text-2xl mb-4">Complete Your Stripe Onboarding</h2>
      {link ? (
        <a href={link} target="_blank" rel="noopener noreferrer" className="bg-blue-500 text-white p-2 rounded">
          Complete Onboarding
        </a>
      ) : (
        <p>Failed to generate onboarding link. Please try again later.</p>
      )}
    </div>
  );
};

export default StripeOnboarding;


================================================================================

Folder: hosting/src\context
Filename: StripeContext.jsx
Contents:
import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from './AuthContext';
import { updateStripeStatusInDb, createAccountLink, createStripeConnectedAccount} from '../api/stripeApi';
import { db } from '../firebase/firebaseConfig';
import { doc, getDoc , updateDoc} from 'firebase/firestore';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom'; // For navigation
import PropTypes from 'prop-types';

// Create a context for Stripe-related data and functions
const StripeContext = createContext();

export const useStripe = () => useContext(StripeContext);

export const StripeProvider = ({ children }) => {
  const { user } = useAuth();
  const [stripeAccountId, setStripeAccountId] = useState(null);
  const [stripeAccountStatus, setStripeAccountStatus] = useState('not_created');
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  useEffect(() => {
    const fetchStripeData = async () => {
      if (user?.uid) {
        try {
          const userRef = doc(db, 'users', user.uid);
          const userDoc = await getDoc(userRef);
          if (userDoc.exists()) {
            const userData = userDoc.data();
            let accountId = userData.stripeAccountId || null;
            
            // If no Stripe account ID exists, create a new Stripe account
            if (!accountId) {
              const stripeData = await createStripeConnectedAccount(user.email); // Create a new Stripe account for the user
              accountId = stripeData.accountId; // Assuming this field is returned by your API
              await updateStripeStatusInDb(user.uid, 'not_completed');
              await updateDoc(userRef, { stripeAccountId: accountId }); // Save the new Stripe account ID in Firestore
            }
  
            setStripeAccountId(accountId);
            setStripeAccountStatus(userData.stripeAccountStatus || 'not_completed');
  
            // Redirect to onboarding if the account status is not completed
            if (userData.stripeAccountStatus === 'not_completed') {
              const accountLink = await createAccountLink(accountId); 
              navigate(`/stripe-onboarding/${accountId}`, { state: { accountLink } });
            }
          } else {
            console.error('No user document found');
            toast.error('No user document found. Please complete the profile first.');
          }
        } catch (error) {
          console.error('Error fetching Stripe data:', error);
          toast.error('Failed to load Stripe data.');
        }
      }
    };
  
    fetchStripeData();
  }, [user, navigate]);
  const updateStripeStatus = async (status) => {
    if (user?.uid) {
      try {
        await updateStripeStatusInDb(user.uid, status);
        setStripeAccountStatus(status);
        toast.success('Stripe status updated successfully.');
      } catch (error) {
        console.error('Error updating Stripe status:', error);
        toast.error('Failed to update Stripe status.');
      }
    }
  };

  return (
    <StripeContext.Provider value={{ stripeAccountId, stripeAccountStatus, setStripeAccountId, updateStripeStatus, loading }}>
      {children}
    </StripeContext.Provider>
  );
};

StripeProvider.propTypes = {
  children: PropTypes.node.isRequired,
};


================================================================================

Folder: hosting/src\context
Filename: useStripeContext.jsx
Contents:
// src/contexts/StripeContext.jsx

// Context Creation:

// You create a StripeContext using createContext(). This context will hold the Stripe-related data and functions.
// useStripe Hook:

// This hook provides a convenient way to access the context values within your components. It uses useContext(StripeContext) to retrieve the values.
// StripeProvider Component:

// This component is responsible for providing the Stripe context to your application.
// It uses the useAuth hook (assuming you have an authentication provider) to get the currentUser.
// It initializes two state variables:
// stripeAccountId: Stores the user's Stripe account ID.
// stripeAccountStatus: Stores the status of the user's Stripe account (e.g., 'not_created', 'incomplete', 'verified').
// Fetching Stripe Data:

// Inside a useEffect hook, it fetches the user's Stripe data from Firestore when the currentUser changes.
// It retrieves the user document from Firestore and updates the state variables with the fetched data.
// updateStripeStatus Function:

// This function allows you to update the user's Stripe account status in Firestore.
// It takes the new status as an argument and updates the stripeAccountStatus field in the user's document.
// Providing Context Values:

// The StripeProvider wraps its children with StripeContext.Provider and passes the following values:
// stripeAccountId
// stripeAccountStatus
// setStripeAccountId
// updateStripeStatus
import { useContext } from 'react';

import { StripeContext } from './StripeContext';



export function useStripeContext() {
  const context = useContext(StripeContext);
  if (!context) {
    throw new Error('useStripeContext must be used within a StripeProvider');
  }
  return context;
}



================================================================================

Folder: hosting/src\hooks
Filename: useFetchStripeData.jsx
Contents:
//useFetchStripeData(apiEndpoint, params): Reusable hook for fetching Stripe data.
import { useState, useEffect } from 'react';
import stripeApi from '../api/stripeApi';

export const useFetchStripeData = (endpoint, params = {}) => {
  const [stripeData, setStripeData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await stripeApi.get(endpoint, { params });
        setStripeData(response.data);
      } catch (error) {
        setError(error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [endpoint, params]);

  return { stripeData, loading, error };
};
// src/hooks/useAuth.js

import { useState, useEffect } from 'react';
import { auth } from '../firebase/firebaseConfig'; // Import only auth service
import { onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';
import { setDoc, doc } from 'firebase/firestore';
import { db } from '../firebase/firebaseConfig'; // Import Firestore for profile management

const useAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    console.log('useAuth: Initializing authentication listener');

    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setLoading(false);
    });

    return () => {
      console.log('useAuth: Cleaning up authentication listener');
      unsubscribe();
    };
  }, []);

  const login = async (email, password) => {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      setUser(userCredential.user);
    } catch (err) {
      setError(err.message);
    }
  };

  const register = async (email, password, additionalData) => {
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      // Create user document in Firestore
      await setDoc(doc(db, 'users', user.uid), {
        email: user.email,
        userType: 'host',
        ...additionalData,
      });

      setUser(user);
    } catch (err) {
      setError(err.message);
    }
  };

  const googleSignIn = async () => {
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(auth, provider);
      await setDoc(doc(db, 'users', result.user.uid), {
        email: result.user.email,
        userType: 'host',
      }, { merge: true });

      setUser(result.user);
    } catch (err) {
      setError(err.message);
    }
  };

  const logout = async () => {
    try {
      await signOut(auth);
      setUser(null);
    } catch (err) {
      setError(err.message);
    }
  };

  return { user, loading, error, login, register, googleSignIn, logout };
};

export default useAuth;


================================================================================

Folder: hosting/src\hooks
Filename: useStripe.jsx
Contents:
import { useEffect, useState } from 'react';
import { useStripe as useStripeJs } from '@stripe/react-stripe-js';
import {
  createStripeConnectedAccount,
  getStripeAccountStatus,
  createAccountLink,
  retrievePaymentIntent,
  updateStripeStatusInDb
} from '../api/stripeApi';

export const useStripe = (user, clientSecret = null) => {
  const [stripeAccountStatus, setStripeAccountStatus] = useState('not_created');
  const [loading, setLoading] = useState(true);
  const [email, setEmail] = useState('');
  const [isLinkAuthorized, setIsLinkAuthorized] = useState(false);
  const [error, setError] = useState(null);
  const stripe = useStripeJs();

  useEffect(() => {
    const initializeStripe = async () => {
      if (!user) {
        setLoading(false);
        return;
      }

      try {
        // Ensure the Stripe Account ID is available before checking status
        if (!user.stripeAccountId) {
          const stripeAccount = await createStripeConnectedAccount(user.email);
          await updateStripeStatusInDb(user.uid, 'not_created');
          user.stripeAccountId = stripeAccount.accountId; // Ensure user object is updated
        }

        if (user.stripeAccountId) {
          const stripeAccountData = await getStripeAccountStatus(user.stripeAccountId);
          setStripeAccountStatus(stripeAccountData);

          if (stripeAccountData === 'not_created' || stripeAccountData === 'incomplete') {
            const accountLink = await createAccountLink(user.stripeAccountId);
            window.location.href = accountLink.url;
          }
        } else {
          throw new Error('Stripe Account ID is required but not available.');
        }

        if (clientSecret) {
          try {
            const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);
            setEmail(paymentIntent.receipt_email || '');
          } catch (err) {
            console.error('Error retrieving payment intent:', err);
            setError(err.message);
          }
        }
      } catch (err) {
        console.error('Error initializing Stripe:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    initializeStripe();
  }, [user, clientSecret, stripe]);

  return {
    stripeAccountStatus,
    loading,
    email,
    isLinkAuthorized,
    error,
  };
};

export default useStripe;


================================================================================

Folder: hosting/src\utils
Filename: stripeUtils.js
Contents:
// stripeConfig.js
import { loadStripe } from '@stripe/stripe-js';

export const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);


================================================================================

Contents of app.jsx:
import React, { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";

import {
  collection,
  getDocs,
  query,
  where,
  orderBy,
  limit,
  startAfter,
} from "firebase/firestore";
import { db } from "./firebase/firebaseConfig";
import { ChakraProvider } from "@chakra-ui/react";
import { Elements } from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";

// Context Providers
import { FirebaseProvider } from "./context/FirebaseContext.jsx";
import { ErrorBoundary } from "./context/ErrorBoundary.jsx";
import { MapsProvider } from "./context/MapsContext.jsx";
import { StripeProvider } from "./context/StripeContext.jsx";
import { AuthProvider } from "./context/AuthContext.jsx";

// Components
import Header from "./components/Header.jsx";
import LeftPanel from "./components/LeftPanel.jsx";
import RightPanel from "./components/RightPanel.jsx";
import Footer from "./components/Footer.jsx";
import Dashboard from "./components/Dashboard.jsx";
import ActiveContainer from "./components/ActiveContainer.jsx";
import MapComponent from "./components/MapComponent.jsx";
import SignupForm from './components/Forms/SignupForm';
import StripeOnboarding from './components/Forms/StripeOnboarding';
import TermsAndConditions from './components/Forms/TermsAndConditions';
import PostSignup from './components/Forms/PostSignup'; // Import new component

// Firebase Config and API functions
import {
  handleCreateStripeOnboarding,
  createStripeCheckoutSession, 
  captureStripePaymentIntent, 
  cancelStripePaymentIntent,

  handleCreateCheckoutSession,
  handleCapturePaymentIntent,
  handleCancelPaymentIntent,
} from "./api/stripeApi";

// Stripe Configuration
const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);

const App = () => {
  const [darkMode, setDarkMode] = useState(false);
  const [appMode, setAppMode] = useState("rabbit");
  const [isRightPanelOpen, setIsRightPanelOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [rideInProgress, setRideInProgress] = useState(false);
  const [activeCategory, setActiveCategory] = useState("all food");
  const [viewType, setViewType] = useState("list");
  const [businesses, setBusinesses] = useState([]);
  const [filteredBusinesses, setFilteredBusinesses] = useState([]);
  const [cachedBusinesses, setCachedBusinesses] = useState({});
  const [chatMessages, setChatMessages] = useState([]);
  const [chatInput, setChatInput] = useState("");
  const [userEmail] = useState("test@example.com");
  const [paymentIntentId, setPaymentIntentId] = useState(null);
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [hasMore, setHasMore] = useState(true);
  const [searchDestination, setSearchDestination] = useState(null);
  const [searchPickupLocation, setSearchPickupLocation] = useState(null);

  useEffect(() => {
    const fetchBusinesses = async () => {
      setLoading(true);
      try {
        const querySnapshot = await getDocs(collection(db, 'places'));
        const businessesData = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setBusinesses(businessesData);
        setFilteredBusinesses(businessesData);
        setError('');
      } catch (error) {
        console.error('Error fetching businesses from Firebase:', error);
        setError('Failed to load businesses');
      } finally {
        setLoading(false);
      }
    };

    fetchBusinesses();
  }, []);

  useEffect(() => {
    if (cachedBusinesses[activeCategory]) {
      setFilteredBusinesses(cachedBusinesses[activeCategory]);
    } else if (activeCategory === 'all food') {
      setFilteredBusinesses(businesses);
    } else {
      const filtered = businesses.filter((business) => business.category === activeCategory);
      setFilteredBusinesses(filtered);
      setCachedBusinesses((prevCache) => ({
        ...prevCache,
        [activeCategory]: filtered,
      }));
    }
  }, [activeCategory, businesses, cachedBusinesses]);

  const handleAccept = (ride) => {
    setSelectedItem(ride);
    setIsRightPanelOpen(true);
    setRideInProgress(true);
    setChatMessages([
      { sender: "guest", text: "Hello! Looking forward to the ride." },
      { sender: "host", text: "Hi! I will be there in 5 minutes." },
    ]);
  };

  const handleSelectItem = (item) => {
    setSelectedItem(item);
    setSearchDestination(null);
    setSearchPickupLocation(null);
  };

  const handleSearchDestinationSelect = (destination) => {
    setSearchDestination(destination);
    setSelectedItem(null);
  };

  const handleSearchPickupSelect = (pickup) => {
    setSearchPickupLocation(pickup);
  };

  const sendMessage = () => {
    if (chatInput.trim()) {
      const newMessage = { sender: "host", text: chatInput };
      setChatMessages((prevMessages) => [...prevMessages, newMessage]);
      setChatInput("");
    }
  };

  const cancelRide = () => {
    setRideInProgress(false);
    setSelectedItem(null);
  };

  const handleSettingsClick = () => {
    console.log("Settings clicked");
  };

  const startStripeOnboarding = async () => {
    try {
      await handleCreateStripeOnboarding(userEmail);
    } catch (error) {
      console.error("Error starting Stripe onboarding:", error);
      setMessage(error.message);
    }
  };

  // const createStripeCheckoutSession = async (amountInCents) => {
  //   try {
  //     const response = await handleCreateCheckoutSession(amountInCents);
  //     setMessage("Redirecting to Stripe Checkout...");
  //     window.location.href = response.url;
  //   } catch (error) {
  //     console.error("Error creating Stripe checkout session:", error);
  //     setMessage(error.message);
  //   }
  // };
  // const captureStripePaymentIntent = async () => {
  //   try {
  //     if (!paymentIntentId) {
  //       throw new Error("Payment Intent ID is missing.");
  //     }
  //     const response = await handleCapturePaymentIntent(paymentIntentId);
  //     setMessage(`Payment Intent captured: ${response.id}`);
  //   } catch (error) {
  //     console.error("Error capturing payment intent:", error);
  //     setMessage(`Error: ${error.message}`);
  //   }
  // };

  // const cancelStripePaymentIntent = async () => {
  //   try {
  //     const response = await handleCancelPaymentIntent(paymentIntentId);
  //     setMessage(`Payment Intent canceled: ${response.id}`);
  //   } catch (error) {
  //     console.error("Error canceling payment intent:", error);
  //     setMessage(error.message);
  //   }
  // };

  const loadMoreBusinesses = async () => {
    if (!hasMore || loading) return;
  
    setLoading(true);
    try {
      const lastDoc = filteredBusinesses[filteredBusinesses.length - 1];
      const nextQuery = query(
        collection(db, 'places'),
        where('category', '==', activeCategory === 'all food' ? '' : activeCategory),
        orderBy('name'),
        startAfter(lastDoc),
        limit(15)
      );
  
      const querySnapshot = await getDocs(nextQuery);
      const newBusinesses = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      }));
  
      setFilteredBusinesses(prev => [...prev, ...newBusinesses]);
      setHasMore(newBusinesses.length === 15);
    } catch (error) {
      console.error('Error loading more businesses:', error);
      setError('Failed to load more businesses');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Router>
      <div className={`flex flex-col h-screen ${darkMode ? 'dark' : ''} overflow-auto`}>
        <ErrorBoundary>
          <FirebaseProvider>
            <AuthProvider>
              <ChakraProvider>
                <MapsProvider apiKey={import.meta.env.VITE_GOOGLE_MAPS_API_KEY}>
                  <Elements stripe={stripePromise}>
                    <StripeProvider>
                      <Header
                        darkMode={darkMode}
                        setDarkMode={setDarkMode}
                        appMode={appMode}
                        setAppMode={setAppMode}
                        setIsLeftPanelOpen={() => {}}
                        setIsRightPanelOpen={setIsRightPanelOpen}
                      />

                      <Routes>
                        <Route
                          path="/"
                          element={
                            <div className="flex flex-col lg:flex-row flex-1 overflow-hidden">
                              <LeftPanel
                                isOpen={true}
                                setIsOpen={() => {}}
                                appMode={appMode}
                                handleAccept={handleAccept}
                                handleSelectItem={handleSelectItem}
                                activeCategory={activeCategory}
                                setActiveCategory={setActiveCategory}
                                viewType={viewType}
                                setViewType={setViewType}
                                rideInProgress={rideInProgress}
                                businesses={filteredBusinesses}
                                handleSettingsClick={handleSettingsClick}
                                loadMoreBusinesses={loadMoreBusinesses}
                                loading={loading}
                                hasMore={hasMore}
                              />
                              {!isRightPanelOpen && (
                                <main className="flex-1 flex flex-col relative transition-all duration-300 p-2 sm:p-4">
                                  {appMode === "rabbit" && !rideInProgress && (
                                    <>
                                      <Dashboard
                                        appMode={appMode}
                                        selectedItem={selectedItem}
                                        onSearchDestinationSelect={handleSearchDestinationSelect}
                                        onSearchPickupSelect={handleSearchPickupSelect}
                                        createStripeCheckoutSession={createStripeCheckoutSession}
                                      />
                                      <MapComponent
                                        businesses={filteredBusinesses}
                                        selectedPlace={selectedItem}
                                        searchDestination={searchDestination}
                                        searchPickupLocation={searchPickupLocation}
                                        onSearchDestinationSelect={handleSearchDestinationSelect}
                                        onSearchPickupSelect={handleSearchPickupSelect}
                                      />
                                    </>
                                  )}
                                  {appMode === "host" && rideInProgress && (
                                    <ActiveContainer
                                      chatMessages={chatMessages}
                                      chatInput={chatInput}
                                      setChatInput={setChatInput}
                                      sendMessage={sendMessage}
                                      cancelAction={cancelRide}
                                    />
                                  )}
                                  {appMode === "host" && !rideInProgress && (
                                    <Dashboard
                                      appMode={appMode}
                                      selectedItem={selectedItem}
                                      onSearchDestinationSelect={handleSearchDestinationSelect}
                                      onSearchPickupSelect={handleSearchPickupSelect}
                                      createStripeCheckoutSession={createStripeCheckoutSession}
                                    />
                                  )}
                                </main>
                              )}
                              {isRightPanelOpen && (
                                <RightPanel
                                  isOpen={isRightPanelOpen}
                                  setIsOpen={setIsRightPanelOpen}
                                  selectedItem={selectedItem}
                                  appMode={appMode}
                                  startStripeOnboarding={startStripeOnboarding}
                                  createStripeCheckoutSession={createStripeCheckoutSession}
                                  captureStripePaymentIntent={captureStripePaymentIntent}
                                  cancelStripePaymentIntent={cancelStripePaymentIntent}
                                  message={message}
                                />
                              )}
                            </div>
                          }
                        />

                        <Route path="/signup" element={<SignupForm />} />
                        <Route path="/stripe-onboarding/:accountId" element={<StripeOnboarding />} />
                        <Route path="/dashboard" element={<Dashboard />} />
                        <Route path="/terms-and-conditions" element={<TermsAndConditions />} />
                        <Route path="/post-signup" element={<PostSignup />} /> {/* New Route */}
                      </Routes>
                      <Footer />
                    </StripeProvider>
                  </Elements>
                </MapsProvider>
              </ChakraProvider>
            </AuthProvider>
          </FirebaseProvider>
        </ErrorBoundary>
      </div>
    </Router>
  );
};

export default App;

